name: Android CI

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, 'WIP')"

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

    - name: Prepare buid
      shell: bash
      run: |
        chmod -R 777 *
        git config core.filemode false
        ./gradlew :app:preBuild

    - name: Prepare adb
      shell: bash
      run: |
        export PATH=$PATH:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/30.0.3:${ANDROID_HOME}/build-tools/30.0.3/lld-bin:${ANDROID_HOME}/ndk/23.0.7599858
        adb kill-server
        adb start-server
        adb devices
        echo "查看 ~/.android 目录。。。"
        ls ~/.android/

    - name: Get disk size
      shell: bash
      run: |
        df -h

    - name: Get ip
      shell: bash
      run: |
        echo "================================================即将测试IP地址========================"
        ip=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:"`
        echo "方式一获取ip： $ip"
        ip2=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:")
        echo "方式二获取ip： $ip2"
        curl ip.sb

    - name: Install apps
      shell: bash
      run: |
        echo "=======================开始安装软件======================="
        # https://www.jianshu.com/p/da1c7dc4217a
        sudo apt-get update
        sudo apt-get -y install net-tools apt-transport-https ca-certificates curl software-properties-common python python3.8
        curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get -y update
        sudo apt-get -y install docker-ce cpu-checker

    - name: Docker build
      shell: bash
      continue-on-error: true
      run: |
        export PATH=$PATH:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/30.0.3:${ANDROID_HOME}/build-tools/30.0.3/lld-bin:${ANDROID_HOME}/ndk/23.0.7599858
        echo "=========测试命令adb==========="
        adb devices
        echo "===========查看image=========================="
        sudo docker image ls
        echo "=================================查看所有容器==================================="
        sudo docker ps -a
        echo "=================================查看运行的容器==================================="
        sudo docker ps
        echo "==========即将拉取budtmo/docker-android-x86-8.1========="
        #sudo docker run -d -e ADBKEY="$(cat ~/.android/adbkey)" --privileged --publish 8554:8554/tcp --publish 5555:5555/tcp  us-docker.pkg.dev/android-emulator-268719/images/30-google-x64
        sudo docker run --privileged -d -p 6080:6080 -p 5554:5554 -p 5555:5555 -e DEVICE="Nexus 5" --name ac budtmo/docker-android-x86-9.0
        echo "===========查看image=========================="
        sudo docker image ls
        echo "=================================查看所有容器==================================="
        sudo docker ps -a
        echo "=================================查看运行的容器==================================="
        sudo docker ps
        echo "=================================链接并测试设备==================================="
        adb connect localhost:5555
        adb kill-server
        adb start-server
        adb devices
        echo "=================================模拟器查看==================================="
        emulator -list-avds
        #emulator @"emulator-5554"

        # sudo docker image rm -f  15ddf4b49c29 70055606aaca 9f5f1136afe0 1786d14e4bfa 31421e72129c 211bb86587c9 ba6acccedd29 e497bb3223cc a7f403d8dc77  225a237e64c2  5ddf6ebdcdb4 2b6f409b1d24  2b6f409b1d24  40eb33f80971  5a214d77f5d7 48b8ec4ed9eb  12adea71a33b  b6f507652425  14119a10abf4  aa67ba258e18  28dca6642db8
        # sudo docker container rm -f budtmo/docker-android-x86-8.1
        # sudo docker pull budtmo/docker-android-x86-12.0
        # if [ $# == 0 ]; then
        #   echo "===========docker 拉取成功 查看image=========================="
        #   sudo docker image ls
        #   echo "=================================docker安装模拟器==================================="
        #   #sudo docker run --privileged -d -p 6080:6080 -p 5554:5554 -p 5555:5555 -e DEVICE="Samsung Galaxy S6" --name android-container budtmo/docker-android-x86-8.1
        #   sudo docker run --privileged -d -p 6080:6080 -p 5554:5554 -p 5555:5555 -e DEVICE="Nexus 5" --name ac12 budtmo/docker-android-x86-12.0
        
        #   echo "=================================安装模拟器完毕，查看所有容器==================================="
        #   sudo docker ps -a
        #   echo "=================================安装模拟器完毕，查看运行的容器==================================="
        #   sudo docker ps
        #   sudo docker container start ac12
        #   echo "=================================安装模拟器完毕，adb查看设备==================================="
        #   # for i in `seq 1 100`
        #   # do
        #   #     echo "运行次数: $i"
        #   #     adb kill-server
        #   #     adb start-server
        #   #     adb devices
        #   #     adb root || true
        #   #     adb remount || true
        #   #     sleep 1m
        #   # done

        #   adb kill-server
        #   adb start-server
        #   adb devices
        #   sleep 1m
        #   #docker exec ac12 adb devices
        #   echo "设备查看"
        #   adb devices 
        #   echo "模拟器查看"
        #   emulator -list-avds
        # fi

    - name: Docker test
      shell: bash
      continue-on-error: true
      run: |
        echo "docker 容器里查看。。。。"
        docker exec ac ls -la
        docker exec ac adb kill-server
        docker exec ac adb start-server
        docker exec ac adb devices
        echo "===============wireless_autoconnect.sh=============="
        docker exec ac cat wireless_autoconnect.sh
        echo "===============wireless_connect.sh=============="
        docker exec ac cat wireless_connect.sh
        echo "===============generate_config.sh=============="
        docker exec ac cat generate_config.sh
        echo "===============entry_point.sh=============="
        docker exec ac cat entry_point.sh
        echo "===============supervisord.conf=============="
        docker exec ac cat supervisord.conf

    - name: rcheck adb
      shell: bash
      run: |
        export PATH=$PATH:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/30.0.3:${ANDROID_HOME}/build-tools/30.0.3/lld-bin:${ANDROID_HOME}/ndk/23.0.7599858
        adb kill-server
        adb start-server
        adb devices

#   u_guest:
#     runs-on: ubuntu-latest
#     if: "!startsWith(github.event.head_commit.message, 'WIP')"

#     steps:
#     - uses: actions/checkout@v2
#     - name: set up JDK 11
#       uses: actions/setup-java@v2
#       with:
#         java-version: '11'
#         distribution: 'adopt'
#         cache: gradle

#     - name: Prepare buid
#       shell: bash
#       run: |
#         chmod -R 777 *
#         git config core.filemode false
#         ./gradlew :app:preBuild

#     - name: Get df
#       shell: bash
#       run: |
#         df -h

#     - name: test
#       shell: bash
#       run: |
#         echo "==============================================================="
#         echo "ANDROID_HOME: ${ANDROID_HOME}"
#         ls  ${ANDROID_HOME}
#         export PATH=$PATH:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/30.0.3:${ANDROID_HOME}/build-tools/30.0.3/lld-bin:${ANDROID_HOME}/ndk/23.0.7599858
#         adb kill-server
#         adb start-server
#         adb devices
#         echo "================cat .android================"
#         ls ~/.android/

#     - name: Get ip
#       shell: bash
#       run: |
#         echo "================================================即将测试IP地址========================"
#         ip=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:"`
#         echo "方式一获取ip： $ip"
#         ip2=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:")
#         echo "方式二获取ip： $ip2"
#         curl ip.sb

#     - name: Install apps
#       shell: bash
#       run: |
#         echo "=======================开始安装软件======================="
#         # https://www.jianshu.com/p/da1c7dc4217a
#         sudo apt-get update
#         sudo apt-get -y install net-tools apt-transport-https ca-certificates curl software-properties-common python python3.8
#         curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
#         sudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
#         sudo apt-get -y update
#         sudo apt-get -y install docker-ce cpu-checker
#         export PATH=$PATH:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/30.0.3:${ANDROID_HOME}/build-tools/30.0.3/lld-bin:${ANDROID_HOME}/ndk/23.0.7599858

#     - name: Docker build
#       shell: bash
#       continue-on-error: true
#       run: |
#         export PATH=$PATH:${ANDROID_HOME}/emulator:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/build-tools/30.0.3:${ANDROID_HOME}/build-tools/30.0.3/lld-bin:${ANDROID_HOME}/ndk/23.0.7599858
#         #sudo docker pull us-docker.pkg.dev/android-emulator-268719/images/28-playstore-x64:30.1.2
#         #sudo nohup docker run -d -e ADBKEY="$(cat ~/.android/adbkey)" --privileged --publish 8554:8554/tcp --publish 5555:5555/tcp  us-docker.pkg.dev/android-emulator-268719/images/28-playstore-x64:30.1.2&
#         sudo docker run -d -e ADBKEY="$(cat ~/.android/adbkey)" --privileged --publish 8554:8554/tcp --publish 5555:5555/tcp  --name ac12 us-docker.pkg.dev/android-emulator-268719/images/30-google-x64:30.1.2
#         for i in `seq 1 3`
#         do
#             sudo docker container start ac12
#             echo "================[$i]adb connect localhost:5555 ======================"
#             adb connect localhost:5555
#             echo "================[$i]docker ps -a ======================"
#             sudo docker ps -a
#             echo "================[$i]docker ps ======================"
#             sudo docker ps
#             echo "================运行次数: $i======================"
#             adb kill-server
#             adb start-server
#             adb devices
#             sleep 1m
#         done
